// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let state = {
    balance: 1000,
    currentBet: 10,
    isSpinning: false,
    history: []
};

// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
const symbols = ['üçí', 'üçã', '‚≠ê', 'üçä', 'üîî', '7Ô∏è‚É£'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function init() {
    updateDisplay();
    loadState();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
function loadState() {
    const saved = localStorage.getItem('casinoState');
    if (saved) {
        state = JSON.parse(saved);
        updateDisplay();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
function saveState() {
    localStorage.setItem('casinoState', JSON.stringify(state));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
    document.getElementById('balance').textContent = state.balance;
    document.getElementById('currentBet').textContent = state.currentBet;
    
    const spinBtn = document.getElementById('spinBtn');
    spinBtn.disabled = state.isSpinning || state.balance < state.currentBet;
    
    updateHistory();
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
function changeBet(amount) {
    if (state.isSpinning) return;
    
    state.currentBet = amount;
    updateDisplay();
}

// –í—Ä–∞—â–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
function spin() {
    if (state.isSpinning || state.balance < state.currentBet) return;
    
    state.isSpinning = true;
    state.balance -= state.currentBet;
    updateDisplay();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    const slots = [
        document.getElementById('slot1'),
        document.getElementById('slot2'),
        document.getElementById('slot3')
    ];
    
    slots.forEach(slot => slot.classList.add('spinning'));
    
    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    const spinDuration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
    const startTime = Date.now();
    
    function updateSlots() {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / spinDuration, 1);
        
        slots.forEach(slot => {
            const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
            slot.textContent = randomSymbol;
        });
        
        if (progress < 1) {
            requestAnimationFrame(updateSlots);
        } else {
            finishSpin();
        }
    }
    
    updateSlots();
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
function finishSpin() {
    const slots = [
        document.getElementById('slot1'),
        document.getElementById('slot2'),
        document.getElementById('slot3')
    ];
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    slots.forEach(slot => slot.classList.remove('spinning'));
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results = [];
    for (let i = 0; i < 3; i++) {
        const randomIndex = Math.floor(Math.random() * symbols.length);
        results.push(symbols[randomIndex]);
        slots[i].textContent = symbols[randomIndex];
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    const winAmount = calculateWin(results, state.currentBet);
    
    if (winAmount > 0) {
        state.balance += winAmount;
        addToHistory(`–í—ã–∏–≥—Ä—ã—à: +${winAmount}`, 'win');
    } else {
        addToHistory(`–ü—Ä–æ–∏–≥—Ä—ã—à: -${state.currentBet}`, 'loss');
    }
    
    state.isSpinning = false;
    updateDisplay();
    saveState();
}

// –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
function calculateWin(results, bet) {
    // –í—Å–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
    if (results[0] === results[1] && results[1] === results[2]) {
        switch(results[0]) {
            case '7Ô∏è‚É£': return bet * 10; // –î–∂–µ–∫–ø–æ—Ç
            case 'üîî': return bet * 5;
            case '‚≠ê': return bet * 4;
            case 'üçä': return bet * 3;
            case 'üçã': return bet * 2;
            case 'üçí': return bet * 2;
            default: return bet * 2;
        }
    }
    
    // –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
    if (results[0] === results[1] || results[1] === results[2] || results[0] === results[2]) {
        return bet * 1.5;
    }
    
    return 0;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
function addToHistory(message, type) {
    const timestamp = new Date().toLocaleTimeString();
    state.history.unshift({
        message: `${timestamp}: ${message}`,
        type: type
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∑–∞–ø–∏—Å—è–º–∏
    if (state.history.length > 10) {
        state.history = state.history.slice(0, 10);
    }
    
    updateHistory();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function updateHistory() {
    const historyList = document.getElementById('historyList');
    historyList.innerHTML = '';
    
    state.history.forEach(item => {
        const div = document.createElement('div');
        div.className = `history-item ${item.type}`;
        div.textContent = item.message;
        historyList.appendChild(div);
    });
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function resetGame() {
    if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É?')) {
        state = {
            balance: 1000,
            currentBet: 10,
            isSpinning: false,
            history: []
        };
        updateDisplay();
        saveState();
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞
let resetTimer;
document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
});

document.addEventListener('mousedown', function(e) {
    if (e.button === 2) { // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
        resetTimer = setTimeout(() => {
            resetGame();
        }, 2000);
    }
});

document.addEventListener('mouseup', function(e) {
    if (e.button === 2) {
        clearTimeout(resetTimer);
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', init);
